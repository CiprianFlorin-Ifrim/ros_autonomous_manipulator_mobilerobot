#!/usr/bin/env python3
import rospy
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint


# arm positions | reference: robot base
arm_low_position = [0.4, 0.4, 0.05, -2.1]
arm_medium_position = [0.2, -0.4, 0.0, -1.6]
arm_high_position = [-0.2, -0.4, 0.15, -1.3]

# gripper extension positions
gripper_default = [0.0, 0.0]
gripper_open = [0.8, 0.8]
gripper_closed = [-1.0, -1.0]

# claw positions
claw_small = [-0.026, -0.026]
claw_medium = [-0.013, -0.013]
claw_large = [0.0, 0.0]

# joints list for each controller
arm_joints = ['first_joint_base', 'second_joint_enclosure_joint', 'second_joint_base', 'third_joint_base']
claw_joints = ['grabber_fixture_left_joint', 'grabber_fixture_right_joint']
gripper_joints = ['left_gripper_joint', 'right_gripper_joint']

# controller topic to publish on
arm_controller = '/arm_controller/command'
claw_controller = '/claw_controller/command'
gripper_controller = '/gripper_controller/command'


#definitions that takes topic, joints and positions as input and perform forward kinematics
def perform_trajectory(topic, joints, positions):
    rospy.init_node('arm_trajectory_publisher')
    controller_name = topic
    trajectory_publihser = rospy.Publisher(controller_name, JointTrajectory, queue_size=10)
                                
    goal_positions = positions
    rospy.sleep(1)

    #creating a message to send Joint Trajectory type
    arm_trajectory = JointTrajectory()
    arm_trajectory.joint_names = joints
    arm_trajectory.points.append(JointTrajectoryPoint())
    arm_trajectory.points[0].positions = goal_positions
    arm_trajectory.points[0].velocities = [0.0 for i in joints]
    arm_trajectory.points[0].accelerations = [0.0 for i in joints]
    arm_trajectory.points[0].time_from_start = rospy.Duration(1)
    rospy.sleep(1)
    trajectory_publihser.publish(arm_trajectory)
    #trajecotry will be executed while the node will complete execution
    #task will be sent before that with time delays


def arm(value):
    if value == "low":
        perform_trajectory(arm_controller, arm_joints, arm_low_position)
    elif value == "medium":
        perform_trajectory(arm_controller, arm_joints, arm_medium_position)
    elif value == "high":
        perform_trajectory(arm_controller, arm_joints, arm_high_position)


def claw(value):
    if value == "small":
        perform_trajectory(claw_controller, claw_joints, claw_small)
    elif value == "medium":
        perform_trajectory(claw_controller, claw_joints, claw_medium)
    elif value == "large":
        perform_trajectory(claw_controller, claw_joints, claw_large)


def gripper(value):
    if value == "default":
        perform_trajectory(gripper_controller, gripper_joints, gripper_default)
    elif value == "closed":
        perform_trajectory(gripper_controller, gripper_joints, gripper_closed)
    elif value == "open":
        perform_trajectory(gripper_controller, gripper_joints, gripper_open)


if __name__ == '__main__':
    #claw("medium")
    #gripper("default")
    #arm("low")
    #claw("small")
    #gripper("default")
    #rospy.sleep(20)
    #arm("medium")
    
#or a more elegant way:
    trajectory_tasks = [[claw_controller, claw_joints, [-0.013, -0.013], 1],
		            [gripper_controller, gripper_joints, [-0.03, -0.03], 1],
		            [arm_controller, arm_joints, [0.4, 0.4, 0.05, -2.1], 20],
		            [claw_controller, claw_joints, [-0.015, -0.015], 1],
		            [arm_controller, arm_joints, [0.2, -0.4, 0.0, -1.6], 1]]
    for i, list_val in enumerate(trajectory_tasks):
	    perform_trajectory(list_val[0], list_val[1], list_val[2])
	    rospy.sleep(list_val[3])
    
"""
Values:
BIG CUBE:
arm_low_position = [0.4, 0.4, 0.05, -2.1]
gripper_default = [-0.03, -0.03]
claw_small = [-0.015, -0.015]

MEDIUM CUBE:
arm_low_position = [0.4, 0.4, 0.05, -2.1]
gripper_default = [0.0, 0.0]
claw_medium = [-0.018, -0.018]

SMALL CUBE:
arm_high_position = [0.4, 0.4, 0.05, -2.1]
gripper_default = [-0.03, -0.03]
claw_small = [-0.026, -0.026]
"""

    
    
    
    
