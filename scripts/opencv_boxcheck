#!/usr/bin/env python3 

import rospy
import cv2
import numpy as np

from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class camera:
    def __init__(self):
        self.image_sub = rospy.Subscriber("/camera/image_raw", Image, self.callback)

    def callback(self,data):
        bridge = CvBridge()
        area_sensitivity = 100000                                        # area threshold to detect items

        try:
            frame = bridge.imgmsg_to_cv2(data, desired_encoding="bgr8")
        except CvBridgeError as e:
            rospy.logerr(e)

    #-----------------------------------------------BOX COLOUR PROCESSING-----------------------------------------
        hsvframe = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        box_lower = np.array([10, 100, 50], np.uint8)                   #set the lower HSV range for the GREEN colour
        box_upper = np.array([20, 255, 255], np.uint8)
        box_mask = cv2.inRange(hsvframe, box_lower, box_upper)

        kernel = np.ones((5,5), "uint8")                                #create a kernel to be used for dilation in order to remove noise/holes from the frame
        box_mask = cv2.dilate(box_mask, kernel)                         #dilate the red mask and remove the noise by using the kernel
        res_box = cv2.bitwise_and(frame, frame, mask = box_mask)        #merge the frames based on the red mask pixel coordinates


    #-----------------------------------------------CONTOURS PROCESSING-----------------------------------------
        contours, hierarchy = cv2.findContours(box_mask, cv2.RETR_TREE, #find the contours on the mask
                                               cv2.CHAIN_APPROX_SIMPLE)
        for j, cnt in enumerate(contours):                              #go through all the contours
            area = cv2.contourArea(cnt)				                    #calculate area of the current contour
            if area > area_sensitivity:                                 #if area is higher than area_sensitivity (perfect value for my camera = 8000)
                x, y, w, h = cv2.boundingRect(cnt)
                frame = cv2.rectangle(frame, (x, y),(x + w, y + h), (0, 255, 0), 2)

                cv2.putText(frame, "Box Identified", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 1.0,(0, 255, 0))

# ---------------------------------------PROGRAM TERMINATION--------------------------------------------------
        cv2.imshow("Robot Camera View", frame)
        cv2.waitKey(3)


#-------------------------------------------------------------------------------------------------------------------
#  initializes a ROS node with the name camera_read . When anonymous = True a random number is assigned to the end of the node name
# to make it unique. Since we just have one node with the same name, anonymous is set to False.
def main():
    camera()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    rospy.init_node('camera_read', anonymous=False)
    main()
